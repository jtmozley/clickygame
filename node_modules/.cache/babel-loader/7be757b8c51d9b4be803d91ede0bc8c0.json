{"ast":null,"code":"var _jsxFileName = \"/Users/justinmozley/Desktop/UT_Coding_Camp/clickygame/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/topbar/index.js\";\nimport Jumbotron from \"./components/jumbotron/index.js\";\nimport friends from \"./friends.json\";\nimport Container from \"./components/cardcontainer/index.js\";\nimport Card from \"./components/imagecard/index.js\";\nimport Footer from \"./components/footer/index.js\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends,\n      selectedImages: [],\n      //everything but zero, 1\n      msg: \"Click an Image to Begin\",\n      score: 0,\n      topscore: 0\n    };\n\n    this.findFriend = id => {\n      const idCheck = this.state.selectedImages.find(myId => myId === id);\n      this.state.selectedImages.push(id);\n      console.log(idCheck + id);\n      console.log(id); //user clicks image\n      //function activated\n      //if id of clicked image is in selected images array\n      //THEN check if current score is top score and if so change top score to reflect, reset score to 0, change message to you lose, reset selected images array, shuffle images\n      //if id of clicked image is NOT in selected images array\n      //THEN check if current score is top score and if so change top score to reflect, push id of selected image to the array, update score +1, change message to make another selection, shuffle images\n\n      this.state.selectedImages.push(id);\n      console.log(this.state.selectedImages);\n\n      if (idCheck) {} else {}\n    };\n\n    this.shuffleFriends = array => {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      score: this.state.score,\n      topScore: this.state.topscore,\n      message: this.state.msg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.state.friends.map(friend => React.createElement(Card, {\n      key: friend.id,\n      id: friend.id,\n      image: friend.image,\n      findFriend: this.findFriend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App; //  // Filter this.state.friends for friends with an id not equal to the id being removed\n//  console.log(\"click worked\");\n//  const myFriend = this.state.tempFriend.find(myId => myId.id === id);\n//  //if we havea copy check if score is high score and restart game\n//  //if the id is not found that means we arealdy pulled it out of the tempFriends list\n//  if (myFriend === undefined) {\n//    this.setState({\n//      //update state to game over\n//      //check top score\n//      //if topscore<score then topscore:this.state.score\n//      score: 0,\n//      msg: \"Game Over!\",\n//      tempFriend: this.state.friends\n//    });\n//  } else {\n//    //if there are no new matches go ahead and update the scores msgs,\n//    //then we need to score the value to check the current list of friends to the oldlist\n//    const oldListoffriends = this.state.tempFriend.filter(\n//      myId => myId.id !== id\n//    );\n//    this.setState({\n//      msg: \"\",\n//      score: this.state.score + 1,\n//      friends: this.state.friends,\n//      tempFriend: oldListoffriends\n//    });\n//    //update the state of tempFriend:oldListoffriends\n//  }\n//  const friends = this.state.friends.filter(friend => friend.id !== id);\n//  // Set this.state.friends equal to the new friends array\n//  this.setState({ friends });","map":{"version":3,"sources":["/Users/justinmozley/Desktop/UT_Coding_Camp/clickygame/src/App.js"],"names":["React","Component","Nav","Jumbotron","friends","Container","Card","Footer","App","state","selectedImages","msg","score","topscore","findFriend","id","idCheck","find","myId","push","console","log","shuffleFriends","array","render","map","friend","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,8BAAhB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,MAAP,MAAmB,8BAAnB;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BQ,KAF0B,GAElB;AACNL,MAAAA,OADM;AAENM,MAAAA,cAAc,EAAE,EAFV;AAEc;AACpBC,MAAAA,GAAG,EAAE,yBAHC;AAINC,MAAAA,KAAK,EAAE,CAJD;AAKNC,MAAAA,QAAQ,EAAE;AALJ,KAFkB;;AAAA,SAU1BC,UAV0B,GAUbC,EAAE,IAAI;AAClB,YAAMC,OAAO,GAAG,KAAKP,KAAL,CAAWC,cAAX,CAA0BO,IAA1B,CAA+BC,IAAI,IAAIA,IAAI,KAAKH,EAAhD,CAAhB;AACA,WAAKN,KAAL,CAAWC,cAAX,CAA0BS,IAA1B,CAA+BJ,EAA/B;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,GAAGD,EAAtB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,EAAZ,EAJkB,CAKlB;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAKN,KAAL,CAAWC,cAAX,CAA0BS,IAA1B,CAA+BJ,EAA/B;AAEAK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAL,CAAWC,cAAvB;;AAEA,UAAGM,OAAH,EAAW,CAEV,CAFD,MAEO,CAEN;AACD,KA/ByB;;AAAA,SAkC1BM,cAlC0B,GAkCTC,KAAK,IAAI,CAAE,CAlCF;AAAA;;AAoC1BC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AACE,MAAA,KAAK,EAAE,KAAKf,KAAL,CAAWG,KADpB;AAEE,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,QAFvB;AAGE,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWE,GAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAOE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKF,KAAL,CAAWL,OAAX,CAAmBqB,GAAnB,CAAuBC,MAAM,IAC5B,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,MAAM,CAACX,EADd;AAEE,MAAA,EAAE,EAAEW,MAAM,CAACX,EAFb;AAGE,MAAA,KAAK,EAAEW,MAAM,CAACC,KAHhB;AAIE,MAAA,UAAU,EAAE,KAAKb,UAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAPF,EAiBE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,CADF;AAqBD;;AA1DyB;;AA4D5B,eAAeN,GAAf,C,CAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/topbar/index.js\";\nimport Jumbotron from \"./components/jumbotron/index.js\";\nimport friends from \"./friends.json\";\nimport Container from \"./components/cardcontainer/index.js\";\nimport Card from \"./components/imagecard/index.js\";\nimport Footer from \"./components/footer/index.js\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    selectedImages: [], //everything but zero, 1\n    msg: \"Click an Image to Begin\",\n    score: 0,\n    topscore: 0\n  };\n\n  findFriend = id => {\n   const idCheck = this.state.selectedImages.find(myId => myId === id);\n   this.state.selectedImages.push(id);\n   console.log(idCheck + id)\n   console.log(id)\n   //user clicks image\n   //function activated\n   //if id of clicked image is in selected images array\n   //THEN check if current score is top score and if so change top score to reflect, reset score to 0, change message to you lose, reset selected images array, shuffle images\n   //if id of clicked image is NOT in selected images array\n   //THEN check if current score is top score and if so change top score to reflect, push id of selected image to the array, update score +1, change message to make another selection, shuffle images\n\n   this.state.selectedImages.push(id);\n\n   console.log(this.state.selectedImages)\n\n   if(idCheck){\n\n   } else {\n\n   }\n  };\n  //you will need a shuffle fx\n\n  shuffleFriends = array => {};\n\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topscore}\n          message={this.state.msg}\n        />\n        <Jumbotron />\n        <Container>\n          {this.state.friends.map(friend => (\n            <Card\n              key={friend.id}\n              id={friend.id}\n              image={friend.image}\n              findFriend={this.findFriend}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n//  // Filter this.state.friends for friends with an id not equal to the id being removed\n//  console.log(\"click worked\");\n//  const myFriend = this.state.tempFriend.find(myId => myId.id === id);\n\n//  //if we havea copy check if score is high score and restart game\n//  //if the id is not found that means we arealdy pulled it out of the tempFriends list\n//  if (myFriend === undefined) {\n//    this.setState({\n//      //update state to game over\n//      //check top score\n//      //if topscore<score then topscore:this.state.score\n//      score: 0,\n//      msg: \"Game Over!\",\n//      tempFriend: this.state.friends\n//    });\n//  } else {\n//    //if there are no new matches go ahead and update the scores msgs,\n//    //then we need to score the value to check the current list of friends to the oldlist\n//    const oldListoffriends = this.state.tempFriend.filter(\n//      myId => myId.id !== id\n//    );\n//    this.setState({\n//      msg: \"\",\n//      score: this.state.score + 1,\n//      friends: this.state.friends,\n//      tempFriend: oldListoffriends\n//    });\n//    //update the state of tempFriend:oldListoffriends\n//  }\n\n//  const friends = this.state.friends.filter(friend => friend.id !== id);\n//  // Set this.state.friends equal to the new friends array\n//  this.setState({ friends });"]},"metadata":{},"sourceType":"module"}