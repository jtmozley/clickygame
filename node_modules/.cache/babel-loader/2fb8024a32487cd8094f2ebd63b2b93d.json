{"ast":null,"code":"var _jsxFileName = \"/Users/justinmozley/Desktop/UT_Coding_Camp/clickygame/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/topbar/index.js\";\nimport Jumbotron from \"./components/jumbotron/index.js\";\nimport friends from \"./friends.json\";\nimport Container from \"./components/cardcontainer/index.js\";\nimport Card from \"./components/imagecard/index.js\";\nimport Footer from \"./components/footer/index.js\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      friends,\n      selectedImages: [],\n      msg: \"Click an Image to Begin\",\n      score: 0,\n      topScore: 0\n    };\n\n    this.findFriend = id => {\n      const idCheck = this.state.selectedImages.find(myId => myId === id);\n      this.state.selectedImages.push(id);\n      this.shuffleImages(this.state.friends);\n\n      if (this.state.score > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score\n        });\n      } //evaluate if the image has been previously selected\n\n\n      if (idCheck) {\n        this.setState({\n          score: 0,\n          msg: \"You Lose\",\n          selectedImages: []\n        });\n      } else {\n        this.setState({\n          score: this.state.score + 1,\n          msg: \"Select Another Image\"\n        });\n      }\n    };\n\n    this.shuffleImages = array => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [array[j], array[i]];\n        array[i] = _ref[0];\n        array[j] = _ref[1];\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      message: this.state.msg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.state.friends.map(friend => React.createElement(Card, {\n      key: friend.id,\n      id: friend.id,\n      image: friend.image,\n      findFriend: this.findFriend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App; //  // Filter this.state.friends for friends with an id not equal to the id being removed\n//  console.log(\"click worked\");\n//  const myFriend = this.state.tempFriend.find(myId => myId.id === id);\n//  //if we havea copy check if score is high score and restart game\n//  //if the id is not found that means we arealdy pulled it out of the tempFriends list\n//  if (myFriend === undefined) {\n//    this.setState({\n//      //update state to game over\n//      //check top score\n//      //if topscore<score then topscore:this.state.score\n//      score: 0,\n//      msg: \"Game Over!\",\n//      tempFriend: this.state.friends\n//    });\n//  } else {\n//    //if there are no new matches go ahead and update the scores msgs,\n//    //then we need to score the value to check the current list of friends to the oldlist\n//    const oldListoffriends = this.state.tempFriend.filter(\n//      myId => myId.id !== id\n//    );\n//    this.setState({\n//      msg: \"\",\n//      score: this.state.score + 1,\n//      friends: this.state.friends,\n//      tempFriend: oldListoffriends\n//    });\n//    //update the state of tempFriend:oldListoffriends\n//  }\n//  const friends = this.state.friends.filter(friend => friend.id !== id);\n//  // Set this.state.friends equal to the new friends array\n//  this.setState({ friends });","map":{"version":3,"sources":["/Users/justinmozley/Desktop/UT_Coding_Camp/clickygame/src/App.js"],"names":["React","Component","Nav","Jumbotron","friends","Container","Card","Footer","App","state","selectedImages","msg","score","topScore","findFriend","id","idCheck","find","myId","push","shuffleImages","setState","array","i","length","j","Math","floor","random","render","map","friend","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/topbar/index.js\";\nimport Jumbotron from \"./components/jumbotron/index.js\";\nimport friends from \"./friends.json\";\nimport Container from \"./components/cardcontainer/index.js\";\nimport Card from \"./components/imagecard/index.js\";\nimport Footer from \"./components/footer/index.js\";\n\nclass App extends Component {\n  state = {\n    friends,\n    selectedImages: [],\n    msg: \"Click an Image to Begin\",\n    score: 0,\n    topScore: 0\n  };\n\n  findFriend = id => {\n    const idCheck = this.state.selectedImages.find(myId => myId === id);\n    this.state.selectedImages.push(id);\n    this.shuffleImages(this.state.friends);\n    if (this.state.score > this.state.topScore) {\n      this.setState({\n        topScore: this.state.score\n      });\n    }\n    //evaluate if the image has been previously selected\n    if (idCheck) {\n      this.setState({\n        score: 0,\n        msg: \"You Lose\",\n        selectedImages: []\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        msg: \"Select Another Image\"\n      });\n    }\n  };\n\n  shuffleImages = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.msg}\n        />\n        <Jumbotron />\n        <Container>\n          {this.state.friends.map(friend => (\n            <Card\n              key={friend.id}\n              id={friend.id}\n              image={friend.image}\n              findFriend={this.findFriend}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n\n//  // Filter this.state.friends for friends with an id not equal to the id being removed\n//  console.log(\"click worked\");\n//  const myFriend = this.state.tempFriend.find(myId => myId.id === id);\n\n//  //if we havea copy check if score is high score and restart game\n//  //if the id is not found that means we arealdy pulled it out of the tempFriends list\n//  if (myFriend === undefined) {\n//    this.setState({\n//      //update state to game over\n//      //check top score\n//      //if topscore<score then topscore:this.state.score\n//      score: 0,\n//      msg: \"Game Over!\",\n//      tempFriend: this.state.friends\n//    });\n//  } else {\n//    //if there are no new matches go ahead and update the scores msgs,\n//    //then we need to score the value to check the current list of friends to the oldlist\n//    const oldListoffriends = this.state.tempFriend.filter(\n//      myId => myId.id !== id\n//    );\n//    this.setState({\n//      msg: \"\",\n//      score: this.state.score + 1,\n//      friends: this.state.friends,\n//      tempFriend: oldListoffriends\n//    });\n//    //update the state of tempFriend:oldListoffriends\n//  }\n\n//  const friends = this.state.friends.filter(friend => friend.id !== id);\n//  // Set this.state.friends equal to the new friends array\n//  this.setState({ friends });\n"]},"metadata":{},"sourceType":"module"}