{"version":3,"sources":["components/topbar/index.js","components/jumbotron/index.js","components/cardcontainer/index.js","components/imagecard/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","message","score","topScore","Jumbotron","Container","children","Card","onClick","findFriend","id","src","image","alt","Footer","href","target","rel","App","state","friends","selectedImages","msg","idCheck","_this","find","myId","push","shuffleImages","setState","setTimeout","array","i","length","j","Math","floor","random","_ref","_this2","this","map","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b4a25d8.chunk.js","sourcesContent":["import React from \"react\";\nimport './style.css';\n\nexport default function Nav(props) {\n  return (\n    <div className=\"bar fixed-top\">\n      <div className=\"row\">\n        <div className=\"col-sm text-center item\">Clicky Game</div>\n        <div className=\"col-sm text-center item message\">{props.message}</div>\n        <div className=\"col-sm text-center item\">Score: {props.score} | Top Score: {props.topScore}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <p className=\"lead text-center\">\n          If you click an image more than once the game will start over and the\n          score will be reset to zero\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\nimport './style.css'\n\nexport default function Container(props){\n    return (\n        <div className=\"container\">\n            <div className=\"row justify-content-center\">{props.children}</div>\n        </div>\n    )\n}","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Card(props) {\n  return (\n    <img\n      onClick={() => props.findFriend(props.id)}\n      className=\"image col-md\"\n      src={props.image}\n      alt={props.id}\n    />\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      <i className=\"fab fa-react\" />\n      <i className=\"fab fa-bootstrap\" />\n      <a\n        href=\"https://github.com/jtmozley/clickygame\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-github\" />Repo\n      </a>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/topbar/index.js\";\nimport Jumbotron from \"./components/jumbotron/index.js\";\nimport friends from \"./friends.json\";\nimport Container from \"./components/cardcontainer/index.js\";\nimport Card from \"./components/imagecard/index.js\";\nimport Footer from \"./components/footer/index.js\";\n\nclass App extends Component {\n  state = {\n    friends,\n    selectedImages: [],\n    msg: \"Click an Image to Begin\",\n    score: 0,\n    topScore: 0\n  };\n\n  //findFriend function called on click of an image\n  findFriend = id => {\n    //find id duplicates in selectedImages array and return truthy or falsy\n    const idCheck = this.state.selectedImages.find(myId => myId === id);\n    //add id of user selected image to array\n    this.state.selectedImages.push(id);\n    //shuffle images\n    this.shuffleImages(this.state.friends);\n    //update top score if needed\n    if (this.state.score > this.state.topScore) {\n      this.setState({\n        topScore: this.state.score\n      });\n    }\n    //evaluate if the image has been previously selected\n    if (idCheck) {\n      this.setState({\n        score: 0,\n        msg: \"You Lose\",\n        selectedImages: []\n      });\n      setTimeout(() => this.setState({msg: \"Click an Image to Begin\"}), 1000)\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        msg: \"Select Another Image\"\n      });\n    }\n  };\n  //function for shuffling images for user display\n  shuffleImages = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n  //rendering all components to display\n  render() {\n    return (\n      <div>\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.msg}\n        />\n        <Jumbotron />\n        <Container>\n          {this.state.friends.map(friend => (\n            <Card\n              key={friend.id}\n              id={friend.id}\n              image={friend.image}\n              findFriend={this.findFriend}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n\n//  // Filter this.state.friends for friends with an id not equal to the id being removed\n//  console.log(\"click worked\");\n//  const myFriend = this.state.tempFriend.find(myId => myId.id === id);\n\n//  //if we havea copy check if score is high score and restart game\n//  //if the id is not found that means we arealdy pulled it out of the tempFriends list\n//  if (myFriend === undefined) {\n//    this.setState({\n//      //update state to game over\n//      //check top score\n//      //if topscore<score then topscore:this.state.score\n//      score: 0,\n//      msg: \"Game Over!\",\n//      tempFriend: this.state.friends\n//    });\n//  } else {\n//    //if there are no new matches go ahead and update the scores msgs,\n//    //then we need to score the value to check the current list of friends to the oldlist\n//    const oldListoffriends = this.state.tempFriend.filter(\n//      myId => myId.id !== id\n//    );\n//    this.setState({\n//      msg: \"\",\n//      score: this.state.score + 1,\n//      friends: this.state.friends,\n//      tempFriend: oldListoffriends\n//    });\n//    //update the state of tempFriend:oldListoffriends\n//  }\n\n//  const friends = this.state.friends.filter(friend => friend.id !== id);\n//  // Set this.state.friends equal to the new friends array\n//  this.setState({ friends });\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}